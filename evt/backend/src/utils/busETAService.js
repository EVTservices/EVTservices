const { Bus, Route, Stop, Factory } = require("../models");
const axios = require("axios");
const { Op } = require("sequelize");
require("dotenv").config();

const GOOGLE_API_KEY = process.env.GOOGLE_API_KEY;

async function handleBusETARequest(message) {
  try {
    // ‚úÖ Step 1: Remove any prefix (e.g. user types "‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏¢‡∏£‡∏ñ")
    const lines = message.trim().split("\n").map(line => line.trim());

    const factoryLine = lines.find(line => line.startsWith("- ‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô:"));
    const shiftLine = lines.find(line => line.startsWith("- ‡πÄ‡∏ß‡∏•‡∏≤(‡∏Å‡∏∞):"));
    const routeLine = lines.find(line => line.startsWith("- ‡∏™‡∏≤‡∏¢‡∏£‡∏ñ:"));
    const stopLine = lines.find(line => line.startsWith("- ‡∏õ‡πâ‡∏≤‡∏¢:"));

    if (!factoryLine || !shiftLine || !routeLine || !stopLine) {
      return "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏:\n- ‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô:\n- ‡πÄ‡∏ß‡∏•‡∏≤(‡∏Å‡∏∞):\n- ‡∏™‡∏≤‡∏¢‡∏£‡∏ñ:\n- ‡∏õ‡πâ‡∏≤‡∏¢:";
    }

    const factoryName = factoryLine.replace("- ‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô:", "").trim();
    const shiftName = shiftLine.replace("- ‡πÄ‡∏ß‡∏•‡∏≤(‡∏Å‡∏∞):", "").trim();
    const routeName = routeLine.replace("- ‡∏™‡∏≤‡∏¢‡∏£‡∏ñ:", "").trim();
    const stopName = stopLine.replace("- ‡∏õ‡πâ‡∏≤‡∏¢:", "").trim();

    // ‚úÖ Step 2: Query database
    const factory = await Factory.findOne({ where: { name: factoryName } });
    if (!factory) return "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏";

    const route = await Route.findOne({
      where: {
        factory_id: factory.factory_id,
        shift_name: shiftName,
        route_name: routeName,
      },
    });
    if (!route) return "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏≤‡∏¢‡∏£‡∏ñ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏∞‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏";

    const stop = await Stop.findOne({
      where: {
        route_id: route.route_id,
        name: stopName,
      },
    });
    if (!stop) return "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡πâ‡∏≤‡∏¢‡πÉ‡∏ô‡∏™‡∏≤‡∏¢‡∏£‡∏ñ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏";

    const bus = await Bus.findOne({
        where: {
          route_id: route.route_id,
          current_latitude: { [Op.ne]: null },
          current_longitude: { [Op.ne]: null },
        },
      });

    if (!bus) return "üöå ‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏ñ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πà‡∏á‡πÉ‡∏ô‡∏™‡∏≤‡∏¢‡∏ô‡∏µ‡πâ";

    // ‚úÖ Step 3: Use Google API to calculate ETA
    const origin = `${bus.current_latitude},${bus.current_longitude}`;
    const destination = `${stop.latitude},${stop.longitude}`;

    const etaRes = await axios.get("https://maps.googleapis.com/maps/api/distancematrix/json", {
      params: {
        origins: origin,
        destinations: destination,
        key: GOOGLE_API_KEY,
      },
    });

    const eta = etaRes.data.rows?.[0]?.elements?.[0];
    if (!eta || eta.status !== "OK") {
      return "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á";
    }

    const minutes = Math.floor(eta.duration.value / 60);

    // ‚úÖ Step 4: Return formatted Thai response
    return (
      `- ‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô: ${factory.name}\n` +
      `- ‡πÄ‡∏ß‡∏•‡∏≤(‡∏Å‡∏∞): ${route.shift_name}\n` +
      `- ‡∏™‡∏≤‡∏¢‡∏£‡∏ñ: ${route.route_name}\n` +
      `- ‡∏õ‡πâ‡∏≤‡∏¢: ${stop.name}\n\n` +
      `‡∏£‡∏ñ‡∏™‡∏≤‡∏¢‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ñ‡∏∂‡∏á‡∏õ‡πâ‡∏≤‡∏¢ ${stop.name}\n` +
      `‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å ${minutes} ‡∏ô‡∏≤‡∏ó‡∏µ`
    );
  } catch (err) {
    console.error("ETA Error:", err);
    return "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á";
  }
}

module.exports = { handleBusETARequest };
